{
  "_args": [
    [
      {
        "raw": "stylint@^1.0.11",
        "scope": null,
        "escapedName": "stylint",
        "name": "stylint",
        "rawSpec": "^1.0.11",
        "spec": ">=1.0.11 <2.0.0",
        "type": "range"
      },
      "/Users/rguleria/Documents/Stuff/Starman/node_modules/gulp-stylint"
    ]
  ],
  "_from": "stylint@>=1.0.11 <2.0.0",
  "_id": "stylint@1.5.9",
  "_inCache": true,
  "_location": "/stylint",
  "_nodeVersion": "7.2.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/stylint-1.5.9.tgz_1481927479899_0.3934680905658752"
  },
  "_npmUser": {
    "name": "simenb",
    "email": "sbekkhus91@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {
    "anymatch": "1.3.0",
    "async-each": "1.0.1",
    "cliui": "3.2.0",
    "decamelize": "1.2.0",
    "fs.realpath": "1.0.0",
    "fsevents": "1.1.1",
    "glob-parent": "2.0.0",
    "inflight": "1.0.6",
    "inherits": "2.0.3",
    "is-binary-path": "1.0.1",
    "is-glob": "2.0.1",
    "lodash.assign": "4.2.0",
    "minimatch": "3.0.4",
    "once": "1.4.0",
    "os-locale": "1.4.0",
    "pkg-conf": "1.1.3",
    "read-pkg-up": "1.0.1",
    "readdirp": "2.1.0",
    "require-main-filename": "1.0.1",
    "string-width": "1.0.2",
    "y18n": "3.2.1"
  },
  "_requested": {
    "raw": "stylint@^1.0.11",
    "scope": null,
    "escapedName": "stylint",
    "name": "stylint",
    "rawSpec": "^1.0.11",
    "spec": ">=1.0.11 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gulp-stylint"
  ],
  "_resolved": "https://registry.npmjs.org/stylint/-/stylint-1.5.9.tgz",
  "_shasum": "29f4dc129fa1ca22150cd867223cee2bed5ff6a2",
  "_shrinkwrap": null,
  "_spec": "stylint@^1.0.11",
  "_where": "/Users/rguleria/Documents/Stuff/Starman/node_modules/gulp-stylint",
  "author": {
    "name": "Ross Patton"
  },
  "bin": {
    "stylint": "./bin/stylint"
  },
  "bugs": {
    "url": "https://github.com/SimenB/stylint/issues"
  },
  "dependencies": {
    "async": "1.5.2",
    "chalk": "1.1.3",
    "chokidar": "1.5.2",
    "columnify": "1.5.4",
    "glob": "7.0.4",
    "lodash.defaults": "4.0.1",
    "path-is-absolute": "1.0.0",
    "stampit": "1.2.0",
    "strip-json-comments": "2.0.1",
    "user-home": "2.0.0",
    "yargs": "4.7.1"
  },
  "description": "A linter for stylus",
  "devDependencies": {
    "chai": "3.5.0",
    "eslint": "2.13.1",
    "istanbul": "0.4.3",
    "jsdoc": "3.4.2",
    "mocha": "2.5.3",
    "sinon": "1.17.4",
    "touch": "1.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "29f4dc129fa1ca22150cd867223cee2bed5ff6a2",
    "tarball": "https://registry.npmjs.org/stylint/-/stylint-1.5.9.tgz"
  },
  "files": [
    "bin/",
    "index.js",
    "src/"
  ],
  "gitHead": "96b7db561090d355c31a8b2444cc7f00880f222e",
  "homepage": "https://github.com/SimenB/stylint#readme",
  "keywords": [
    "cli",
    "css",
    "hinter",
    "lint",
    "linter",
    "styl",
    "style",
    "stylint",
    "stylus",
    "stylus-hint",
    "stylus-lint"
  ],
  "license": "GPL-3.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "rpatton",
      "email": "rosspatton2@gmail.com"
    },
    {
      "name": "simenb",
      "email": "sbekkhus91@gmail.com"
    },
    {
      "name": "wojciechczerniak",
      "email": "wojciech.czerniak@gmail.com"
    }
  ],
  "name": "stylint",
  "optionalDependencies": {},
  "readme": "## stylint - the stylus linter.\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/rossPatton/stylint?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Code Climate](https://codeclimate.com/github/SimenB/stylint/badges/gpa.svg)](https://codeclimate.com/github/SimenB/stylint)\n[![Test Coverage](https://codeclimate.com/github/SimenB/stylint/badges/coverage.svg)](https://codeclimate.com/github/SimenB/stylint/coverage)\n[![Build Status](https://travis-ci.org/SimenB/stylint.svg?branch=master)](https://travis-ci.org/SimenB/stylint)\n\n[![NPM](https://nodei.co/npm/stylint.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/stylint/)\n\n\n[changelog](changelog.md)\n\n[known issues](https://github.com/SimenB/stylint/issues)\n\n## Installation\nAs part of your project: `npm install stylint --save-dev`\n\nAs a cli tool: `npm install stylint -g`\n\n## Issues/improvments\n\nNOTE: We are currently working on a 2.0 release. Bug fixing will not be a priority during this process, but we will try\nto make sure every bug is squashed after that.\n\nFollow the [project](https://github.com/SimenB/stylint/projects/1),\n[milestone](https://github.com/SimenB/stylint/milestone/5) and [issue](https://github.com/SimenB/stylint/issues/269) for\nprogress. Please contribute if you have the time! Both with code, but also with ideas and features.\n\nThe goal of 2.0 is to make the project more stable:\n- actual unit tests on the rules to avoid regressions, instead of coupling them to the tests of the core linter\n- a clearly defined API surface, making Stylint easy to depend on for external tools\n- a cleaner way of invoking Stylint programatically\n- a way of linting a string of code, not just files\n- simplify config (inspired by ESLint's config structure)\n\nSometime in the future:tm: we will also provide extension points for custom rules, and maybe even automatically fix some violations, but that's a change that might take some time. These goals are more long-term though, short term the focus is on stability and integration with tools.\n\nIf you have any problems with the linter just create a ticket there and I will respond.\n\nSame thing if you have any feature requests.\n\nI will gladly accept pull requests if you want to do the work yourself.\n\nyou can also ping me [here](https://gitter.im/rossPatton/stylint)\n\n\n## CLI\n`-h` or `--help`    Display list of commands\n\n`-w` or `--watch`   Watch file or directory and run lint on change\n\n`-c` or `--config`  Pass in location of custom config file\n\n`-v` or `--version` Display current version\n\n\n## Example cli Usage:\n`stylint` Run stylint on cwd\n\n`stylint path/to/filename.styl` Run stylint on a file\n\n`stylint path/to/dir --watch` Watch dir, run stylint on file change\n\n`stylint --help` Get list of commands\n\n`stylint --version` Get version number\n\n`stylint --config path/to/config/.configrc` Run stylint with custom config settings\n\n`stylint --reporter stylint-reporter-module` Run stylint with [custom reporter](#custom-reporters) module\n\n`stylint styl/ --watch -c path/to/config/.configrc` Watch dir, use custom config\n\n\n## Non CLI Usage\nI'll be the first to admit that the syntax is a bit weird, but it works just fine.\n```javascript\nconst stylint = require('stylint')('path/to/stylus/', {\n\t\tbrackets: 'always',\n\t\tnamingConvention: 'BEM',\n\t\tsemicolons: 'always'\n}, callbackFn).create();\n```\n\nAPI docs are in the docs/ folder\n\n\n## Gulp\nYou can use the CLI with [gulp-shell](https://github.com/sun-zheng-an/gulp-shell) like below:\n```javascript\ngulp.task('stylint', shell.task([\n\t\t'stylint path/to/styl/ -c .stylintrc'\n]));\n```\n\nOr just use [gulp-stylint](https://github.com/danielhusar/gulp-stylint)\n```javascript\nvar gulp = require('gulp');\nvar stylint = require('gulp-stylint');\n\ngulp.task('default', function () {\n\t\treturn gulp.src('src/*.styl')\n\t\t\t\t.pipe(stylint())\n});\n```\n\n## Grunt\nYou can use [grunt-stylint](https://github.com/xdissent/grunt-stylint)\n\n```javascript\ngrunt.initConfig({\n\tstylint: {\n\t\toptions: {\n\t\t\tconfig: {\n\t\t\t\tcolons: 'never'\n\t\t\t}\n\t\t},\n\t\tsrc: ['src/**/*.styl']\n\t}\n});\n```\n\n## Webpack\nYou can use [stylint-loader](https://github.com/guerrero/stylint-loader)\n\n```javascript\nmodule.exports = {\n\t// ...\n\tmodule: {\n\t\tpreLoaders: [\n\t\t\t{\n\t\t\t\ttest: /\\.styl$/,\n\t\t\t\tloader: 'stylint'\n\t\t\t}\n\t\t],\n\t\tloaders: [\n\t\t\t{\n\t\t\t\ttest: /\\.styl$/,\n\t\t\t\tloader: 'style!css!stylus'\n\t\t\t}\n\t\t]\n\t}\n\t// ...\n}\n```\n\n\n## As Part of Your Workflow\nStylint integrations with multiple IDEs are available.\n\n* [Atom](https://atom.io/packages/linter-stylint)\n* [Sublime Text](https://packagecontrol.io/packages/SublimeLinter-contrib-stylint)\n* [WebStorm / PhpStorm / IntelliJ IDEA](https://plugins.jetbrains.com/plugin/9162)\n* [Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=vtfn.stylint)\n\n## Why Write This Tool?\nStylus is my CSS pre-processor of choice and the lack of a decent linter (or really, any linter) was an annoying pain point. So I thought I'd try my hand at writing what I thought my ideal linter would look like.\n\n\n## Why Use This Tool?\nTo catch little mistakes (duplication of rules for instance) and to enforce a code style guide. This is particularly important with Stylus, which is unopinionated when it comes to syntax. Like Stylus itself, this linter opts for flexibility over rigidity.\n\n\n## Options\nThe following is a list of all options available to stylint.\n\nNote that customProperties and mixins are aliases\n```json\n{\n\t\"blocks\": false,\n\t\"brackets\": \"never\",\n\t\"colons\": \"always\",\n\t\"colors\": \"always\",\n\t\"commaSpace\": \"always\",\n\t\"commentSpace\": \"always\",\n\t\"cssLiteral\": \"never\",\n\t\"customProperties\": [],\n\t\"depthLimit\": false,\n\t\"duplicates\": true,\n\t\"efficient\": \"always\",\n\t\"exclude\": [],\n\t\"extendPref\": false,\n\t\"globalDupe\": false,\n\t\"groupOutputByFile\": true,\n\t\"indentPref\": false,\n\t\"leadingZero\": \"never\",\n\t\"maxErrors\": false,\n\t\"maxWarnings\": false,\n\t\"mixed\": false,\n\t\"mixins\": [],\n\t\"namingConvention\": false,\n\t\"namingConventionStrict\": false,\n\t\"none\": \"never\",\n\t\"noImportant\": true,\n\t\"parenSpace\": false,\n\t\"placeholders\": \"always\",\n\t\"prefixVarsWithDollar\": \"always\",\n\t\"quotePref\": false,\n\t\"reporterOptions\": {\n\t\t\"columns\": [\"lineData\", \"severity\", \"description\", \"rule\"],\n\t\t\"columnSplitter\": \"  \",\n\t\t\"showHeaders\": false,\n\t\t\"truncate\": true\n\t},\n\t\"semicolons\": \"never\",\n\t\"sortOrder\": \"alphabetical\",\n\t\"stackedProperties\": \"never\",\n\t\"trailingWhitespace\": \"never\",\n\t\"universal\": false,\n\t\"valid\": true,\n\t\"zeroUnits\": \"never\",\n\t\"zIndexNormalize\": false\n}\n```\n\n\n#### Custom Configuration\nStylint will try to find a custom configuration in many different places before it falls back to the default config (see above). It goes in this order of importance:\n\n1. Pass in via function parameter (ie, using stylint programmatically)\n2. Passed in via command line flag\n3. Passed in via package.json, either as an object or path to a `.stylintrc` file\n4. Via a `.stylintrc` file, starting from the cwd and working up to the home user directory\n5. If all of the above fails, use the default config\n\nYou can also use the `-c` or `--config` flags to pass in the location of your custom `.stylintrc` config file if it resides somewhere else.\n\nYou can use the `stylintrc` property in your package.json to point to a `.stylintrc` file, or just directly pass in your config\n\nIf requiring Stylint ( as opposed to using it via the cli ), the 2nd param is the config object.\n\n\n#### Severity\nStylint has 2 levels of output, Warnings and Errors. All Stylint rules optionally take an object, allowing you to set it to be an Error. Combined with the maxWarnings and maxErrors properties, you can be very flexible about say, code style but strict on things like code duplication.\n\nExample:\n```json\n{\n\t\t\"brackets\": {\n\t\t\t\t\"expect\": \"never\",\n\t\t\t\t\"error\": true\n\t\t},\n\t\t\"colons\": {\n\t\t\t\t\"expect\": \"always\",\n\t\t\t\t\"error\": true\n\t\t}\n}\n```\n\n\n## Custom Reporters\nStylint console output can be modified with the use of a reporter. Feel free to write your own (no matter how outlandish) and I'll add it here.\n\n* [stylint-stylish](https://github.com/SimenB/stylint-stylish)\n* [stylint-json-reporter](https://github.com/sertae/stylint-json-reporter)\n\n\n## Excluding files, directories, and code blocks from the linter\n\n### .stylintignore\nBefore linting Stylint will look for a `.stylintignore` file in the current working directory, and will ignore files listed there. The files should be formatted in the same way you would use `.gitignore` or `.eslintignore`\n\nFor reference, it looks like this:\n\n```\npath/to/file.styl\npath/to/directory/\n```\n\n\n### the package.json approach\nYou can also exclude files/directories via your package.json by adding a stylintignore property.\n\nFor reference:\n\n```json\n{\n\t\"stylintignore\": [\"path/to/file.styl\", \"path/to/directory/\"],\n}\n```\n\n\n### the config approach\nsee config documentation below for how to use the exclude option via `.stylintrc` or your passed in config object\n\n\n### stylint toggle ( inline comment: @stylint off || @stylint on )\nDisable linting for a particular block of code by placing `@stylint off` in a line comment. Re-enable by placing `@stylint on` in a line comment further down. Stylint will not test any lines until turned back on. Use this to suppress warnings on a case-by-case basis. By default the linter will check every line except for @css blocks or places where certain rules have exceptions.\n\nFor example, let's say you want to enforce `namingConvention: \"lowercase_underscore\"`, but you're also styling elements from the Bootstrap framework. You can use the `@stylint off` toggle to prevent warnings in places where you're referencing Bootstrap classes.\n\nExample:\n```stylus\n.button_block {\n\tbackground: silver;\n\tpadding: 4px;\n}\n// @stylint off\n.button_block .btn-default {\n\tbackground-color: green;\n\tcolor: white;\n}\n// @stylint on\n```\n\n\n### ignore line toggle ( inline comment: @stylint ignore )\nA toggle that works like `@stylint off`, but just for one line. Useful for cases where you want to include fallback css for browser support.\n\nExample:\n```stylus\n.button-zoom\n\tbackground-image: url('path/to/png.png') // @stylint ignore\n\tbackground-image: url('path/to/svg.svg')\n\tcursor: pointer // @stylint ignore\n\tcursor: zoom-in\n```\n\n\n### transparent mixins / custom properties ( Array<string> )\nIn Stylus you have the option of using mixins transparently, like css properties. Because of how Stylus' syntax works, this rule also allows you to add adhoc support for custom properties as needed by just added the name of the property to this array.\n\n```javascript\n>>> config file\n\t\"customProperties\": ['myCustomProperty']\n\n>>> example.styl\n.className\n\tmyCustomProperty: 5px\n```\n\nWhere `myCustomProperty` is a mixin that takes a px val as it's parameter.\n\nIf you use nib, `size`, `absolute`, and `fixed` are often used in this way. If you use css-modules, `composes` is another one.\n\nBecause of nib's widespread use, and css-modules growing popularity, the above 4 custom properties are supported by Stylint by default.\n\n\n### blocks ( default: false, 'always' || 'never' || false )\nWhen 'always' expect the `@block` keyword when defining block variables.\nWhen 'never', expect no `@block` keyword when defining block variables.\nWhen false, do not check either way.\n\nExample if 'always': prefer `my-block = @block ` over `my-block = `\n\nExample if 'never': prefer `my-block = ` over `my-block = @block `\n\n\n### brackets ( default: 'never', 'always' || 'never' || false )\nWhen 'always', expect {} when declaring a selector.\nWhen 'never', expect no brackets when declaring a selector.\n\nExample if 'always': prefer `.some-class-name {` over `.some-class-name`\n\nExample if 'never': prefer `.some-class-name ` over `.some-class-name {`\n\n\n### colons ( default: 'always', 'always' || 'never' || false )\nWhen 'always', expect : when declaring a property.\nWhen 'never', expect no : when declaring a property.\n\nExample if 'always': prefer `margin: 0` over `margin 0`\n\nExample if 'never: prefer `margin 0` over `margin: 0`\n\n\n### colors ( default: 'always' || false )\nWhen 'always', enforce variables when defining hex values\n\nExample if true: prefer `color $red` over `color #f00`\n\n\n### commaSpace ( default: 'always', 'always' || 'never' || false )\nEnforce or disallow spaces after commas.\n\nExample if always: prefer `rgba(0, 0, 0, .18)` over `rgba(0,0,0,.18)`\n\nExample if never: prefer `rgba(0,0,0,.18)` over `rgba(0, 0, 0, .18)`\n\n\n### commentSpace ( default: 'always', 'always' || 'never' || false )\nEnforce or disallow spaces after line comments\n\nExample if always: prefer `// comment` over `//comment`\n\nExample if never: prefer `//comment` over `// comment`\n\n\n### cssLiteral ( default: 'never', 'never' || false )\nBy default Stylint ignores `@css` blocks. If set to true however, it will throw a warning if `@css` is used.\n\nExample if 'never': `@css` will throw a warning\n\n\n### depthLimit ( default: false, number or false )\nSet the max selector depth. If set to 4, max selector depth will be 4 indents. Pseudo selectors like `&:first-child` or `&:hover` won't count towards the limit.\n\nSet to false if you don't want to check for this.\n\n\n### duplicates ( default: true, true || false )\nChecks if selector or property duplicated unnecessarily. By default, only checks on a file-by-file basis, but if `globalDupes: true` is set, then it will also check for duplicates globally (for root values only).\n\nExample if true: the following will throw a warning:\n```stylus\n.test\n\tmargin 0\n\tmargin 5px\n```\n\n\n### efficient ( default: 'always', 'always' || 'never' || false )\nCheck for places where properties can be written more efficiently.\n\nExample if always: prefer `margin 0` over `margin 0 0`\n\nExample if never: prefer `margin 0 0` over `margin 0`\n\n\n### exclude ( default: [], array of strings )\nExclude certain file patterns from linting.\n\nExample: `[\"vendor/**/*\", \"node_modules/**/*\"]` will exclude all files in the `vendor` or `node_modules` directory.\n\n\n### extendPref ( default: false, '@extend' || '@extends' || false )\nPass in either `@extend` or `@extends` and then enforce that. Both are valid in Stylus. It doesn't really matter which one you use. I prefer `@extends` myself.\n\nExample if set to `@extends`: prefer `@extends $some-var` over `@extend $some-var`\n\nExample if set to `@extend`: prefer `@extend $some-var` over `@extend $some-var`\n\n\n### globalDupe ( default: false, true || false )\nWorks in conjunction with duplicates. Does nothing on its own. If false, duplicates will check for dupes within individual files only. If true, duplicates will check for dupes across all files.\n\nExample if true: the following will throw a warning\n```stylus\n>>> file1.styl\n.test\n\tmargin 0\n\n>>> file2.styl\n.test\n\tmargin 5px\n```\n\n\n### groupOutputByFile ( default: true, true || false )\nStylint's default setting groups errors and warnings by file when outputting. You can disable this if you want\n\nExample if true:\n```javascript\npath/to/file.styl\n\t73:32      warning  mixed spaces and tabs  mixed\n\t78:30   error    missing semicolon      semicolons\n\npath/to/file2.styl\n\t16     warning  prefer alphabetical when sorting properties  sortOrder\n```\n\nExample if false:\n```javascript\npath/to/file.styl\n\t73:32      warning  mixed spaces and tabs  mixed\n\npath/to/file.styl\n\t78:30   error    missing semicolon      semicolons\n\npath/to/file2.styl\n\t16     warning  prefer alphabetical when sorting properties  sortOrder\n```\n\n\n### indentPref ( default: false, number or false )\nThis works in conjunction with depthLimit. If you indent with spaces this is the number of spaces you indent with. If you use hard tabs, set this value to false.\n\nIf you set this to a number, it will output warnings/errors if you the # of spaces used for indenting differs from the number set.\n\nBy default this value is false, so if you indent with spaces you'll need to manually set this value in a custom `.stylintrc` file.\n\nExample if 2: prefer `/s/smargin: 0` over `/s/s/smargin: 0`\n\n\n### leadingZero ( default: 'never', 'always' || 'never' || false )\nEnforce or disallow unnecessary leading zeroes on decimal points.\n\nExample if always: prefer `rgba( 0, 0, 0, 0.5 )` over `rgba( 0, 0, 0, .5 )`\n\nExample if never: prefer `rgba( 0, 0, 0, .5 )` over `rgba( 0, 0, 0, 0.5 )`\n\n\n### maxErrors ( default: false, number || false )\nSet 'max' number of Errors.\n\n\n### maxWarnings ( default: false, number || false )\nSet 'max' number of Warnings.\n\n\n### mixed ( default: false, boolean, relies on indentPref )\nReturns true if mixed spaces and tabs are found. If a number is passed to indentPref, it assumes soft tabs (ie, spaces), and if false is passed to indentPref it assumes hard tabs.\n\nIf soft tabs, outputs warning/error if hard tabs used. If hard tabs, outputs warning/error if unnecessary extra spaces found.\n\nExample if indentPref: 4 and mixed: true: prefer `\\s\\s\\s\\smargin\\s0` over `\\tmargin\\s0`\n\nExample if indentPref: 2 and mixed: true: prefer `\\s\\smargin\\s0` over `\\tmargin\\s0`\n\nExample if indentPref: false and mixed: true: prefer `\\tmargin\\s0` over `\\s\\s\\s\\smargin\\s0`\n\n\n### namingConvention ( default: false, false | 'lowercase-dash' | 'lowercase_underscore' | 'camelCase' | 'BEM' )\nEnforce a particular naming convention when declaring classes, ids, and variables. Throws a warning if you don't follow the convention.\n\nExample if set to `'lowercase-dash'`: prefer `$var-name` over `$var_name` or `$varName`\n\nExample if set to `'lowercase_underscore'`: prefer `$var_name` over `$var-name` or `$varName`\n\nExample if set to `'camelCase'`: prefer `$varName` over `$var_name` or `$var-name`\n\nExample if set to `'BEM'`: prefer `$var__like--this` over `$var_name` or `$varName`\n\n\n### namingConventionStrict ( default: false, true || false )\nBy default, namingConvention only looks at variable names. If namingConventionStrict is set to true, namingConvention will also look at class and id names.\n\nIf you have a lot of 3rd party css you can't change you might want to leave this off.\n\n\n### none ( default: 'never'. options: 'always' || never' || false  )\nIf 'always' check for places where `none` used instead of `0`.\nIf 'never' check for places where `0` could be used instead of `none`.\n\nExample if 'always': prefer `border none` over `border 0`\n\nExample if 'never': prefer `outline 0` over `outline none`\n\n\n### noImportant ( default: true, true || false  )\nIf true, show warning when `!important` is found.\n\nExample if true: the following will throw a warning\n\n```stylus\ndiv\n\tcolor red !important\n```\n\n\n### parenSpace ( default: false, 'always' || 'never' || false )\nEnforce or disallow use of extra spaces inside parens.\n\nExample if always: prefer `my-mixin( $myParam )` over `my-mixin($myParam)`\n\nExample if never: prefer `my-mixin($myParam)` over `my-mixin( $myParam )`\n\n\n### placeholder ( default: 'always', 'always' || 'never' || false )\nEnforce extending placeholder vars when using `@extend(s)`\n\nExample if always: prefer `@extends $placeholder` over `$extends .some-class`\n\nExample if never: prefer `@extends .some-class` over `$extends $placeholder`\n\n\n### prefixVarsWithDollar ( default: 'always', 'always' || 'never' || false )\nEnforce use of `$` when defining a variable. In Stylus using a `$` when defining a variable is optional, but is a good idea if you want to prevent ambiguity. Not including the `$` sets up situations where you wonder: \"Is this a variable or a value?\" For instance: `padding $default` is easier to understand than `padding default`.\n\nYes, `default` isn't an acceptable value for `padding`, but at first glance you might not catch that since it just looks like a value. And now if you try to set `cursor default`, it's not going to behave the way you expect. All this pain and heartache could've been avoided if you just used a `$`.\n\nExample if always: prefer `$my-var = 0` over `my-var = 0`\n\nExample if never: prefer `my-var = 0` over `$my-var = 0`\n\n\n### quotePref ( default: false,  'single' || 'double' || false )\nEnforce consistent quotation style.\n\nExample if `'single'`: prefer `$var = 'some string'` over `$var = \"some string\"`\n\nExample if `'double'`: prefer `$var = \"some string\"` over `$var = 'some string'`\n\n\n### reporterOptions ( Object )\nIf using the default reporter, Stylint uses columnify when outputting warnings and errors (only if you have groupOutputByFile set to true). See [columnify](https://www.npmjs.com/package/columnify) for more details. Using this option, you can easily customize the output (to an extent) without having to install a separate reporter.\n\nDefault options:\n```\n{\n\tcolumns: ['lineData', 'severity', 'description', 'rule'],\n\tcolumnSplitter: '  ',\n\tshowHeaders: false,\n\ttruncate: true\n}\n```\n\n\n### semicolons ( default: 'never', 'always' || 'never' || false )\nEnforce or disallow semicolons\n\nExample if always: prefer `margin 0;` over `margin 0`\n\nExample if never: prefer `margin 0` over `margin 0;`\n\n\n### sortOrder ( default: 'alphabetical', 'alphabetical' || 'grouped' || [Array] || false )\nEnforce a particular sort order when declaring properties. Throws a warning if you don't follow the order. If set to false, allow any order.\n\nExample if `'alphabetical'`:\n\nprefer this:\n```stylus\n.some-class\n\tdisplay block\n\tfloat left\n\tposition absolute\n\tright 10px\n\ttop 0\n```\n\nover this:\n```stylus\n.some-class\n\tposition absolute\n\ttop 0\n\tright 10px\n\tdisplay block\n\tfloat left\n```\n\nExample if `'grouped'` ([based on predefined grouped ordering](src/data/ordering.json#L2)):\n\nprefer this:\n```stylus\n.some-class\n\tposition absolute\n\ttop 0\n\tright 10px\n\tdisplay block\n\tfloat left\n```\n\nover this:\n```stylus\n.some-class\n\tdisplay block\n\tfloat left\n\tposition absolute\n\tright 10px\n\ttop 0\n```\n\nExample if `[ 'margin', 'padding', 'float', 'position' ]`:\n\nprefer this:\n```stylus\n.some-class\n\tmargin 0\n\tpadding 0\n\tfloat left\n\tposition absolute\n\tright 10px\n\ttop 0\n\tdisplay block\n```\n\nover this:\n```stylus\n.some-class\n\tdisplay block\n\tfloat left\n\tposition absolute\n\tright 10px\n\ttop 0\n\tmargin 0\n\tpadding 0\n```\n\nWhen set to `'grouped'` or `{Array}` throws a warning if properties that are not defined in the ordering array are not after those that should be ordered.\n\n\n### stackedProperties ( default: 'never', 'never' || false )\nNo one-liners. Enforce putting properties on new lines.\n\nExample if `never`: prefer\n\n```stylus\n.className\n\tpadding 0\n```\n\nover\n\n`.className { padding 0 }`\n\n\n### trailingWhitespace ( default: 'never', 'never' || false )\nIf false, ignores trailing white space. If 'never', trailing white space will throw a warning.\n\n\n### universal ( default: false, 'never' || false )\nLooks for instances of the inefficient * selector. Lots of resets use this, for good reason (resetting box model), but past that you really don't need this selector, and you should avoid it if possible.\n\nExample if never, disallow the following:\n```stylus\ndiv *\n\t\tmargin 0\n```\n\n\n### valid ( default: true, true || false )\nCheck that a property is valid CSS or HTML.\n\nExample if true: `marg 0` will throw a warning, prefer `margin 0`\n\nExample if true: `divv` will throw a warning, prefer `div`\n\n\n### zeroUnits ( default: 'never', 'always' || 'never' || false )\nLooks for instances of `0px`. You don't need the px. Checks all units, not just px.\n\nExample if always: prefer `margin-right 0px` over `margin-right 0`\n\nExample if never: prefer `margin-right 0` over `margin-right 0em`\n\n\n### zIndexNormalize ( default: false, number or false )\nEnforce some (very) basic z-index sanity. Any number passed in will be used as the base for your z-index values. Throws an error if your value is not normalized.\n\nExample if set to 5: prefer `z-index 10` over `z-index 9`\nExample if set to 10: prefer `z-index 20` over `z-index 15`\nExample if set to 50: prefer `z-index 100` over `z-index 75`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/SimenB/stylint.git"
  },
  "scripts": {
    "cover": "istanbul cover node_modules/.bin/_mocha -- -u exports -R spec test/test.js",
    "docs": "jsdoc src/ --recurse --destination docs/",
    "lint": "eslint .",
    "precover": "npm run lint",
    "pretest": "npm run lint",
    "start": "node --harmony index.js",
    "test": "mocha"
  },
  "version": "1.5.9"
}
