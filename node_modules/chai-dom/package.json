{
  "_args": [
    [
      {
        "raw": "chai-dom@^1.2.2",
        "scope": null,
        "escapedName": "chai-dom",
        "name": "chai-dom",
        "rawSpec": "^1.2.2",
        "spec": ">=1.2.2 <2.0.0",
        "type": "range"
      },
      "/Users/rguleria/Documents/Stuff/Starman/node_modules/karma-chai-plugins"
    ]
  ],
  "_from": "chai-dom@>=1.2.2 <2.0.0",
  "_id": "chai-dom@1.4.3",
  "_inCache": true,
  "_location": "/chai-dom",
  "_nodeVersion": "6.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/chai-dom-1.4.3.tgz_1480194044382_0.19763202359899879"
  },
  "_npmUser": {
    "name": "nathanboktae",
    "email": "nathan@nathanblack.org"
  },
  "_npmVersion": "3.8.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "chai-dom@^1.2.2",
    "scope": null,
    "escapedName": "chai-dom",
    "name": "chai-dom",
    "rawSpec": "^1.2.2",
    "spec": ">=1.2.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/karma-chai-plugins"
  ],
  "_resolved": "https://registry.npmjs.org/chai-dom/-/chai-dom-1.4.3.tgz",
  "_shasum": "6f533807009c2aca1d831516fee8cd2ba2351cdd",
  "_shrinkwrap": null,
  "_spec": "chai-dom@^1.2.2",
  "_where": "/Users/rguleria/Documents/Stuff/Starman/node_modules/karma-chai-plugins",
  "author": {
    "name": "Nathan Black",
    "email": "nathan@nathanblack.org"
  },
  "bugs": {
    "url": "https://github.com/nathanboktae/chai-dom/issues"
  },
  "dependencies": {},
  "description": "DOM assertions for the Chai assertion library using vanilla JavaScript",
  "devDependencies": {
    "chai": "^3.2.0",
    "dom4": "^1.4.6",
    "mocha": "^2.3.2",
    "mocha-phantomjs": "^3.6.0",
    "phantomjs": "1.9.7-15"
  },
  "directories": {},
  "dist": {
    "shasum": "6f533807009c2aca1d831516fee8cd2ba2351cdd",
    "tarball": "https://registry.npmjs.org/chai-dom/-/chai-dom-1.4.3.tgz"
  },
  "engines": {
    "node": ">= 0.12.0"
  },
  "gitHead": "973e9eac4839c5e56cec64c218914c13ef362a77",
  "homepage": "https://github.com/nathanboktae/chai-dom#readme",
  "keywords": [
    "test",
    "assertion",
    "assert",
    "testing",
    "chai-plugin",
    "browser",
    "vendor",
    "dom",
    "no-jquery"
  ],
  "main": "./chai-dom",
  "maintainers": [
    {
      "name": "nathanboktae",
      "email": "nathan@nathanblack.org"
    }
  ],
  "name": "chai-dom",
  "optionalDependencies": {},
  "readme": "# chai-dom\n\n[![Build Status](https://secure.travis-ci.org/nathanboktae/chai-dom.png)](http://travis-ci.org/nathanboktae/chai-dom)\n\nchai-dom is an extension to the [chai](http://chaijs.com/) assertion library that\nprovides a set of assertions when working with the DOM (specifically [HTMLElement][] and [NodeList][])\n\nForked from [chai-jquery](https://github.com/chaijs/chai-jquery) to use for those of us freed of jQuery's baggage.\n\n## Assertions\n\n### `attr(name[, value])`\n### `attribute(name[, value])`\n\nAssert that the [HTMLElement][] has the given attribute, using [`getAttribute`](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute).\nOptionally, assert a particular value as well. The return value is available for chaining.\n\n```js\ndocument.getElementById('header').should.have.attr('foo')\nexpect(document.querySelector('main article')).to.have.attribute('foo', 'bar')\nexpect(document.querySelector('main article')).to.have.attr('foo').match(/bar/)\n```\n\n### `class(className)`\nAssert that the [HTMLElement][] has the given class, using [`classList`](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList).\n\n```js\ndocument.getElementsByName('bar').should.have.class('foo')\nexpect(document.querySelector('main article')).to.have.class('foo')\n```\n\n### `id(id)`\nAssert that the [HTMLElement][] has the given id.\n\n```js\ndocument.querySelector('section').should.have.id('#main')\nexpect(document.querySelector('section')).to.have.id('foo')\n```\n\n### `html(html)`\nAssert that the html of the [HTMLElement][] is equal to or contains the given html.\n\n```js\ndocument.querySelector('.name').should.have.html('<em>John Doe</em>')\nexpect(document.querySelector('#title')).to.have.html('Chai Tea')\n```\n```js\ndocument.querySelector('.name').should.contain.html('<span>Doe</span>')\nexpect(document.querySelector('#title')).to.contain.html('<em>Tea</em>')\n```\n\n### `text(text)`\nAssert that the text of the [HTMLElement][] or combined text of the [NodeList][] is equal to or contains the given text, using [`textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent).\n\n```js\ndocument.querySelector('.name').should.have.text('John Doe')\nexpect(document.querySelector('#title')).to.have.text('Chai Tea')\ndocument.querySelectorAll('ul li').should.have.text('JohnJaneJessie')\n```\n\n```js\ndocument.querySelector('.name').should.contain.text('John')\nexpect(document.querySelector('#title')).to.contain.text('Chai')\ndocument.querySelectorAll('ul li').should.contain.text('Jane')\n```\n\n### `text(text[])`\nAssert that the [`textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent) of the [NodeList][] children deep equal those text, or when using the contains flag, all the text items are somewhere in the [NodeList][].\n\n```js\ndocument.querySelectorAll('.name').should.have.text(['John Doe', 'Jane'])\nexpect(document.querySelectorAll('ul li')).to.have.text(['John', 'Jane', 'Jessie'])\n```\n\n```js\ndocument.querySelectorAll('.name').should.contain.text(['John Doe'])\nexpect(document.querySelectorAll('ul li')).to.contain.text(['John', 'Jessie'])\n```\n\n### `value(value)`\nAssert that the [HTMLElement][] has the given value\n\n```js\ndocument.querySelector('.name').should.have.value('John Doe')\nexpect(document.querySelector('input.year')).to.have.value('2012')\n```\n\n### `empty`\nAssert that at the [HTMLElement][] or [NodeList][] has no child nodes. If the object asserted against is niether of those, the original implementation will be called.\n\n```js\ndocument.querySelector('.empty').should.be.empty\nexpect(document.querySelector('section')).not.to.be.empty\n```\n\n### `length(n)`\nAssert that at the [HTMLElement][] or [NodeList][] has exactly `n` child nodes. If the object asserted against is niether of those, the original implementation will be called.\n\n```js\ndocument.querySelector('ul').should.have.length(2)\ndocument.querySelector('li').should.have.length(2)\nexpect(document.querySelector('ul')).not.to.have.length(3)\n```\n\n### `exist`\nAssert that the [NodeList][] is not empty. If the object asserted\nagainst is not a [NodeList][], the original implementation will be called.\n\n```js\ndocument.querySelectorAll('dl dd').should.exist\nexpect(document.querySelectorAll('.nonexistent')).not.to.exist\n```\n\n### `match(selector)`\nAssert that the selection matches an [HTMLElement][] or all elements in a [NodeList][], using [`matches`](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches). If the object asserted against is neither of those, the original implementation will be called.\n\nNote `matches` is DOM Level 4, so you may [need a polyfill](https://github.com/WebReflection/dom4) for it.\n\n```js\ndocument.querySelectorAll('input').should.match('[name=\"bar\"]')\nexpect(document.getElementById('empty')).to.match('.disabled')\n```\n\n### `contain(selector or element)`\nAssert that the [HTMLElement][] contains the given element, using [`querySelectorAll`](https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll) for selector strings or using [`contains`](https://developer.mozilla.org/en-US/docs/Web/API/Node/contains) for elements. If the object asserted against is not an [HTMLElement][], or if `contain` is not called as a function, the original\nimplementation will be called.\n\n```js\ndocument.querySelector('section').should.contain('ul.items')\ndocument.querySelector('section').should.contain(document.querySelector('section div'))\nexpect(document.querySelector('#content')).to.contain('p')\n```\n\n## Installation\n\n### npm\n\n```\nnpm install chai-dom\n```\n\n### bower\n\n```\nbower install chai-dom\n```\n\n## Usage\n\n### CommonJS\n\n```javascript\nvar chai = require('chai')\nchai.use(require('chai-dom'))\n```\n\n### AMD\n\n```javascript\nrequire(['chai', 'chai-dom'], function(chai, chaiDom) {\n  chai.use(chaiDom)\n})\n```\n\n### Global\n\n```html\n<script src=\"chai.js\"></script>\n<script src=\"chai-dom.js\"></script>\n```\n\nUse the assertions with chai's `expect` or `should` assertions.\n\n## Contributing\n\nTo run the test suite, run `npm install` (requires\n[Node.js](http://nodejs.org/) to be installed on your system), and run `npm test` or open\n`test/index.html` in your web browser.\n\n## License\n\nMIT License (see the LICENSE file)\n\n[HTMLElement]: https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\n[NodeList]: https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nathanboktae/chai-dom.git"
  },
  "scripts": {
    "test": "mocha-phantomjs test/index.html"
  },
  "version": "1.4.3"
}
