{
  "_args": [
    [
      {
        "raw": "shrink-ray@^0.1.3",
        "scope": null,
        "escapedName": "shrink-ray",
        "name": "shrink-ray",
        "rawSpec": "^0.1.3",
        "spec": ">=0.1.3 <0.2.0",
        "type": "range"
      },
      "/Users/rguleria/Documents/Stuff/Starman"
    ]
  ],
  "_from": "shrink-ray@>=0.1.3 <0.2.0",
  "_id": "shrink-ray@0.1.3",
  "_inCache": true,
  "_location": "/shrink-ray",
  "_nodeVersion": "4.2.3",
  "_npmOperationalInternal": {
    "host": "packages-5-east.internal.npmjs.com",
    "tmp": "tmp/shrink-ray-0.1.3.tgz_1456085268844_0.45252077654004097"
  },
  "_npmUser": {
    "name": "aickin",
    "email": "xander76@yahoo.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "shrink-ray@^0.1.3",
    "scope": null,
    "escapedName": "shrink-ray",
    "name": "shrink-ray",
    "rawSpec": "^0.1.3",
    "spec": ">=0.1.3 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/shrink-ray/-/shrink-ray-0.1.3.tgz",
  "_shasum": "8ee4637399c495b897b4b7272ef4b0d7cea35725",
  "_shrinkwrap": null,
  "_spec": "shrink-ray@^0.1.3",
  "_where": "/Users/rguleria/Documents/Stuff/Starman",
  "bugs": {
    "url": "https://github.com/aickin/compression/issues"
  },
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "Jonathan Ong",
      "email": "me@jongleberry.com",
      "url": "http://jongleberry.com"
    },
    {
      "name": "Sasha Aickin"
    }
  ],
  "dependencies": {
    "accepts": "~1.3.1",
    "bytes": "2.2.0",
    "compressible": "~2.0.7",
    "debug": "~2.2.0",
    "iltorb": "^1.0.9",
    "lru-cache": "^4.0.0",
    "multipipe": "^0.3.0",
    "node-zopfli": "^1.4.0",
    "on-headers": "~1.0.1",
    "stream-buffers": "^3.0.0",
    "vary": "~1.1.0"
  },
  "description": "Node.js compression middleware with brotli and zopfli support",
  "devDependencies": {
    "istanbul": "0.4.2",
    "mocha": "2.3.4",
    "supertest": "1.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "8ee4637399c495b897b4b7272ef4b0d7cea35725",
    "tarball": "https://registry.npmjs.org/shrink-ray/-/shrink-ray-0.1.3.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "files": [
    "LICENSE",
    "HISTORY.md",
    "index.js"
  ],
  "gitHead": "b6adcaa86116fc8ad44ecbdc518c2f31cc89eab7",
  "homepage": "https://github.com/aickin/compression#readme",
  "keywords": [
    "compression",
    "gzip",
    "deflate",
    "brotli",
    "zopfli",
    "middleware",
    "express",
    "connect",
    "compress",
    "content-encoding"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "aickin",
      "email": "xander76@yahoo.com"
    }
  ],
  "name": "shrink-ray",
  "optionalDependencies": {},
  "readme": "# shrink-ray\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n\nNode.js compression middleware with modern codings like brotli and zopfli.\n\nThe following compression codings are supported:\n\n  - deflate\n  - gzip\n  - brotli\n  - zopfli (for asynchronous compression of static assets)\n\nIn addition, if a response contains an ETag, `shrink-ray` will cache the compressed\nresult for later requests and even re-compress it asynchronously at the highest\npossible compression (using zopfli for gzip and deflate and brotli quality 11\nfor brotli). This makes it possible to use the best possible compression\nalgorithms for static content without having to sacrifice runtime performance.\n\nThe combination of caching and use of better compression algorithms makes\n`shrink-ray` serve static files in [our benchmark](./benchmark) 3x faster than\n`compression` while using only one quarter as much CPU time.\n\n**Note:** this project was forked from `compression`, the standard Express/Connect\ncompression middleware, and it stands on the shoulders of that impressive\nproject.\n\n## Install\n\nYou must first install `node`, `npm`, and [the node native build\ntoolchain](https://github.com/nodejs/node-gyp#installation).\n\n```bash\n$ npm install shrink-ray\n```\n\n## API\n\n```js\nvar shrinkRay = require('shrink-ray')\n```\n\n### shrinkRay([options])\n\nReturns the shrink-ray middleware using the given `options`. The middleware\nwill attempt to compress response bodies for all request that traverse through\nthe middleware, based on the given `options`.\n\nThis middleware will never compress responses that include a `Cache-Control`\nheader with the [`no-transform` directive](https://tools.ietf.org/html/rfc7234#section-5.2.2.4),\nas compressing will transform the body.\n\n#### Options\n\n`shrinkRay()` accepts these properties in the options object.\n\nNote that `shrink-ray` options are backward-compatible with `compression`, but\nwe have also moved all of the gzip/deflate/zlib-specific parameters\ninto a sub-object called `zlib`. If you use `zlib` parameters at the root level\nof options in `shrink-ray`, you will get a deprecation warning.\n\n##### filter\n\nA function to decide if the response should be considered for compression.\nThis function is called as `filter(req, res)` and is expected to return\n`true` to consider the response for compression, or `false` to not compress\nthe response.\n\nThe default filter function uses the [compressible](https://www.npmjs.com/package/compressible)\nmodule to determine if `res.getHeader('Content-Type')` is compressible.\n\n##### cache\n\nA function to decide if the compressed response should be cached for later use.\nThis function is called as `cache(req, res)` and is expected to return `true` if\nthe compressed response should be cached and `false` if the response should not\nbe cached. Note that `shrink-ray` uses ETags to ensure that a cache entry is appropriate\nto return, so it will **never** cache a response that does not include an `ETag`,\neven if the cache function returns `true`.\n\nWhen a response is cached, it will be asynchronously re-encoded at the highest\nquality level available for the compression algorithm in question (zopfli for\ngzip and deflate, and brotli quality 11 for brotli). These quality levels are generally\nnot acceptable for use when responding to a request in real-time because they\nare too CPU-intensive, but they can be performed in the background so that\nsubsequent requests get the highest compression levels available.\n\nBy default, `shrink-ray` caches any response that has an `ETag` header associated with\nit, which means it should work out of the box with `express.static`, caching static\nfiles with the highest available compression. If you serve a large number of dynamic\nfiles with ETags, you may want to have your cache function restrict caching to your\nstatic file directory so as to avoid thrashing the cache and wasting CPU time on\nexpensive compressions.\n\n##### cacheSize\n\nThe approximate size, in bytes, of the cache. This is a number of bytes, any string\naccepted by the [bytes](https://www.npmjs.com/package/bytes) module, or `false`\nto indicate no caching. The default `cacheSize` is `128mb`.\n\nThe size includes space for the URL of the cached resources and the compressed bytes\nof the responses. It does not, however, include overhead for JavaScript objects,\nso the actual total amount of memory taken up by the cache will be somewhat larger\nthan `cacheSize` in practice.\n\nWhen deciding how large to make your cache, remember that every cached resource\nin your app may have as many as three compressed entries: one each for gzip,\ndeflate, and brotli.\n\n##### threshold\n\nThe byte threshold for the response body size before compression is considered\nfor the response, defaults to `1kb`. This is a number of bytes, any string\naccepted by the [bytes](https://www.npmjs.com/package/bytes) module, or `false`.\n\n**Note** this is only an advisory setting; if the response size cannot be determined\nat the time the response headers are written, then it is assumed the response is\n_over_ the threshold. To guarantee the response size can be determined, be sure\nset a `Content-Length` response header.\n\n##### zlib\n\nThere is a sub-object of the options object called `zlib` which contains all of\nthe parameters related to `gzip` and `deflate`. In addition to\nthose listed below, [zlib](http://nodejs.org/api/zlib.html) options may be\npassed in to the `zlib` sub-object.\n\nAlso note that to temporarily preserve backwards compatibility with `compression`,\nall of these `zlib` parameters can be included at the root level of the options\nobject. However, having `zlib` parameters at the root level is deprecated, and we\nplan to remove it.\n\n##### zlib.chunkSize\n\nThe default value is `zlib.Z_DEFAULT_CHUNK`, or `16384`.\n\nSee [Node.js documentation](http://nodejs.org/api/zlib.html#zlib_memory_usage_tuning)\nregarding the usage.\n\n##### zlib.level\n\nThe level of zlib compression to apply to responses. A higher level will result\nin better compression, but will take longer to complete. A lower level will\nresult in less compression, but will be much faster.\n\nThis is an integer in the range of `0` (no compression) to `9` (maximum\ncompression). The special value `-1` can be used to mean the \"default\ncompression level\", which is a default compromise between speed and\ncompression (currently equivalent to level 6).\n\n  - `-1` Default compression level (also `zlib.Z_DEFAULT_COMPRESSION`).\n  - `0` No compression (also `zlib.Z_NO_COMPRESSION`).\n  - `1` Fastest compression (also `zlib.Z_BEST_SPEED`).\n  - `2`\n  - `3`\n  - `4`\n  - `5`\n  - `6` (currently what `zlib.Z_DEFAULT_COMPRESSION` points to).\n  - `7`\n  - `8`\n  - `9` Best compression (also `zlib.Z_BEST_COMPRESSION`).\n\nThe default value is `zlib.Z_DEFAULT_COMPRESSION`, or `-1`.\n\n**Note** in the list above, `zlib` is from `zlib = require('zlib')`.\n\n##### zlib.memLevel\n\nThis specifies how much memory should be allocated for the internal compression\nstate and is an integer in the range of `1` (minimum level) and `9` (maximum\nlevel).\n\nThe default value is `zlib.Z_DEFAULT_MEMLEVEL`, or `8`.\n\nSee [Node.js documentation](http://nodejs.org/api/zlib.html#zlib_memory_usage_tuning)\nregarding the usage.\n\n##### zlib.strategy\n\nThis is used to tune the compression algorithm. This value only affects the\ncompression ratio, not the correctness of the compressed output, even if it\nis not set appropriately.\n\n  - `zlib.Z_DEFAULT_STRATEGY` Use for normal data.\n  - `zlib.Z_FILTERED` Use for data produced by a filter (or predictor).\n    Filtered data consists mostly of small values with a somewhat random\n    distribution. In this case, the compression algorithm is tuned to\n    compress them better. The effect is to force more Huffman coding and less\n    string matching; it is somewhat intermediate between `zlib.Z_DEFAULT_STRATEGY`\n    and `zlib.Z_HUFFMAN_ONLY`.\n  - `zlib.Z_FIXED` Use to prevent the use of dynamic Huffman codes, allowing\n    for a simpler decoder for special applications.\n  - `zlib.Z_HUFFMAN_ONLY` Use to force Huffman encoding only (no string match).\n  - `zlib.Z_RLE` Use to limit match distances to one (run-length encoding).\n    This is designed to be almost as fast as `zlib.Z_HUFFMAN_ONLY`, but give\n    better compression for PNG image data.\n\n**Note** in the list above, `zlib` is from `zlib = require('zlib')`.\n\n##### zlib.windowBits\n\nThe default value is `zlib.Z_DEFAULT_WINDOWBITS`, or `15`.\n\nSee [Node.js documentation](http://nodejs.org/api/zlib.html#zlib_memory_usage_tuning)\nregarding the usage.\n\n##### brotli\n\nTo control the parameters of the brotli algorithm, pass in child object at the key\n`brotli` with one or more of the following brotli algorithm parameters: `lgblock`,\n`lgwin`, `mode`, or `quality`.\n\nNote that unlike the standard brotli library, which defaults to quality 11, this\nlibrary defaults to quality 4, which is [generally more appropriate for dynamic\ncontent](https://blogs.akamai.com/2016/02/understanding-brotlis-potential.html).\n\n#### .filter\n\nThe default `filter` function. This is used to construct a custom filter\nfunction that is an extension of the default function.\n\n```js\napp.use(shrinkRay({filter: shouldCompress}))\n\nfunction shouldCompress(req, res) {\n  if (req.headers['x-no-compression']) {\n    // don't compress responses with this request header\n    return false\n  }\n\n  // fallback to standard filter function\n  return shrinkRay.filter(req, res)\n}\n```\n\n### res.flush\n\nThis module adds a `res.flush()` method to force the partially-compressed\nresponse to be flushed to the client.\n\nNote that brotli does not currently support `flush`, so it is a no-op when using\nbrotli compression.\n\n## Examples\n\n### express/connect\n\nWhen using this module with express or connect, simply `app.use` the module as\nhigh as you like. Requests that pass through the middleware will be compressed.\n\n```js\nvar shrinkRay = require('shrink-ray')\nvar express = require('express')\n\nvar app = express()\n\n// compress all requests\napp.use(shrinkRay())\n\n// add all routes\n```\n\n### Server-Sent Events\n\nBecause of the nature of compression this module does not work out of the box\nwith server-sent events. To compress content, a window of the output needs to\nbe buffered up in order to get good compression. Typically when using server-sent\nevents, there are certain block of data that need to reach the client.\n\nYou can achieve this by calling `res.flush()` when you need the data written to\nactually make it to the client.\n\n(Note that since brotli does not support `flush`, brotli will never be used as\ncompression for server-sent events.)\n\n```js\nvar shrinkRay = require('shrink-ray')\nvar express     = require('express')\n\nvar app = express()\n\n// compress responses\napp.use(shrinkRay())\n\n// server-sent event stream\napp.get('/events', function (req, res) {\n  res.setHeader('Content-Type', 'text/event-stream')\n  res.setHeader('Cache-Control', 'no-cache')\n\n  // send a ping approx every 2 seconds\n  var timer = setInterval(function () {\n    res.write('data: ping\\n\\n')\n\n    // !!! this is the important part\n    res.flush()\n  }, 2000)\n\n  res.on('close', function () {\n    clearInterval(timer)\n  })\n})\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/shrink-ray.svg\n[npm-url]: https://npmjs.org/package/shrink-ray\n[downloads-image]: https://img.shields.io/npm/dm/shrink-ray.svg\n[downloads-url]: https://npmjs.org/package/shrink-ray\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/aickin/compression.git"
  },
  "scripts": {
    "test": "mocha --check-leaks --reporter spec --bail",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --check-leaks --reporter dot",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --check-leaks --reporter spec"
  },
  "version": "0.1.3"
}
