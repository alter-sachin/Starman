{
  "_args": [
    [
      {
        "raw": "gulp-stylint@^3.0.0",
        "scope": null,
        "escapedName": "gulp-stylint",
        "name": "gulp-stylint",
        "rawSpec": "^3.0.0",
        "spec": ">=3.0.0 <4.0.0",
        "type": "range"
      },
      "/Users/rguleria/Documents/Stuff/Starman"
    ]
  ],
  "_from": "gulp-stylint@>=3.0.0 <4.0.0",
  "_id": "gulp-stylint@3.0.0",
  "_inCache": true,
  "_location": "/gulp-stylint",
  "_nodeVersion": "4.1.0",
  "_npmUser": {
    "name": "simenb",
    "email": "sbekkhus91@gmail.com"
  },
  "_npmVersion": "2.14.3",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3",
    "xtend": "4.0.1"
  },
  "_requested": {
    "raw": "gulp-stylint@^3.0.0",
    "scope": null,
    "escapedName": "gulp-stylint",
    "name": "gulp-stylint",
    "rawSpec": "^3.0.0",
    "spec": ">=3.0.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-stylint/-/gulp-stylint-3.0.0.tgz",
  "_shasum": "f6e34905ecabd3d4ae5f2873c79473235a7ab5b7",
  "_shrinkwrap": null,
  "_spec": "gulp-stylint@^3.0.0",
  "_where": "/Users/rguleria/Documents/Stuff/Starman",
  "author": {
    "name": "Daniel Husar",
    "email": "dano.husar@gmail.com",
    "url": "https://github.com/danielhusar"
  },
  "bugs": {
    "url": "https://github.com/danielhusar/gulp-stylint/issues"
  },
  "dependencies": {
    "gulp-util": "^3.0.0",
    "stylint": "^1.0.11",
    "through2": "^0.6.1"
  },
  "description": "Gulp plugin for stylus stylint linter",
  "devDependencies": {
    "chalk": "^1.1.0",
    "jshint": "^2.8.0",
    "mocha": "*",
    "sinon": "^1.13.0",
    "stylint-stylish": "^1.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "f6e34905ecabd3d4ae5f2873c79473235a7ab5b7",
    "tarball": "https://registry.npmjs.org/gulp-stylint/-/gulp-stylint-3.0.0.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "a92d9bc3ba1904598a41e658dff2ed97fbc5a901",
  "homepage": "https://github.com/danielhusar/gulp-stylint#readme",
  "keywords": [
    "gulpplugin",
    "linter",
    "stylint",
    "stylus"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "efrafa",
      "email": "dano.husar@gmail.com"
    },
    {
      "name": "rpatton",
      "email": "me@rosspatton.com"
    },
    {
      "name": "simenb",
      "email": "sbekkhus91@gmail.com"
    }
  ],
  "name": "gulp-stylint",
  "optionalDependencies": {},
  "readme": "# [gulp](http://gulpjs.com)-stylint [![Build Status](https://travis-ci.org/danielhusar/gulp-stylint.svg?branch=master)](https://travis-ci.org/danielhusar/gulp-stylint)\n\n> Gulp plugin for stylus [stylint](https://github.com/rossPatton/stylint) linter\n\n\n## Install\n\n```sh\n$ npm install --save-dev gulp-stylint\n```\n\n\n## Usage\n\n```js\nvar gulp = require('gulp');\nvar stylint = require('gulp-stylint');\n\ngulp.task('default', function () {\n\treturn gulp.src('src/*.styl')\n\t\t.pipe(stylint())\n\t\t.pipe(stylint.reporter());\n});\n```\n\n## Custom options\n\n```js\nvar gulp = require('gulp');\nvar stylint = require('gulp-stylint');\n\ngulp.task('default', function () {\n\treturn gulp.src('src/*.styl')\n\t\t.pipe(stylint({config: '.stylintrc'}))\n\t\t.pipe(stylint.reporter());\n});\n```\n\n## Reporters\n\n### Standard\nStandard reporter is just printing out the report created from `stylint` (possibly formatted by #reporter).\n\n```js\nvar gulp = require('gulp');\nvar stylint = require('gulp-stylint');\n\ngulp.task('default', function () {\n\treturn gulp.src('src/*.styl')\n\t\t.pipe(stylint())\n\t\t.pipe(stylint.reporter());\n});\n```\n\n#### Reporter options\n\n##### logger\nType: `function`  \nDefault: `console.log`\n\nDefault warnings log function, you can use for example `gutil.log`.\n\n```js\nvar gulp = require('gulp');\nvar stylint = require('gulp-stylint');\n\ngulp.task('default', function () {\n\treturn gulp.src('src/*.styl')\n\t\t.pipe(stylint())\n\t\t.pipe(stylint.reporter({ logger: gutil.log.bind(null, 'gulp-stylint:') }));\n});\n```\n\n### Fail-reporter\nAnother reporter you can use is the `fail-reporter`. You can use it to fail the `gulp`-process in the case of linting-errors, or optionally warnings.\n\n```js\nvar gulp = require('gulp');\nvar stylint = require('gulp-stylint');\n\ngulp.task('default', function () {\n\treturn gulp.src('src/*.styl')\n\t\t.pipe(stylint())\n\t\t.pipe(stylint.reporter())\n\t\t.pipe(stylint.reporter('fail'));\n});\n```\n\n#### Fail-reporter options\n\n##### failOnWarning\nType: `boolean`  \nDefault: `false`\nIf provided, fail the process not only on errors from `stylint`, but also on warnings.\n\n```js\nvar gulp = require('gulp');\nvar stylint = require('gulp-stylint');\n\ngulp.task('default', function () {\n\treturn gulp.src('src/*.styl')\n\t\t.pipe(stylint())\n\t\t.pipe(stylint.reporter())\n\t\t.pipe(stylint.reporter('fail', { failOnWarning: true }));\n});\n```\n\n## API\n\n### stylint(options)\n\n#### options\ntype: `object`\n\n##### config\n\nType: `string`  \nDefault: `undefined`\n\nPass in path to custom rules configuration file as a string. If no configuration is passed in, it will use the `.stylintrc` file in the project root if present. If that file is not present, it will use default rules.\n\n##### rules\n\ntype: `object`  \nDefault: `undefined`\n\nPass in an object with rules for `stylint` to lint by. This will override all default rules.\n\n##### reporter\n\ntype: `string or object`  \nDefault: `undefined`\n\nIf using `rules`, and you want to use a custom reporter, you can pass in either a string with it's name, or an object containing both a string with the name, and options for it.  \nIf you only pass in `config`, this config can be placed in that file instead.\n\nExample:\n```js\ngulp.task('default', function () {\n  return gulp.src('src/*.styl')\n    .pipe(stylint({\n      rules: { semicolons: 'always' },\n      reporter: {\n        reporter: 'stylint-stylish',\n        reporterOptions: {\n          verbose: true\n        }\n      }\n    }))\n    .pipe(stylint.reporter());\n}\n```\n\n__NOTE__: You must install the reporter yourself. E.g. `npm i -D stylint-stylish`.\n\n\n## License\n\nMIT Â© [Daniel Husar](https://github.com/danielhusar)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/danielhusar/gulp-stylint.git"
  },
  "scripts": {
    "pretest": "jshint index.js test.js",
    "test": "mocha"
  },
  "version": "3.0.0"
}
